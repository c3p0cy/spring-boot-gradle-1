buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
    }
}

repositories {
    jcenter()
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

/*
 * 使用Gradle Wrapper有以下好處：
 * - 不用安裝gradle也能運行gradle
 * - 所有人使用相同的gradle版本
 *
 * 使用 gradle wrapper 後會產生：gradlew、gradlew.bat 和 gradle 目錄:
 * - 這三個文件（夾）都需要提交到代碼庫中！如此在沒有安裝 Gradle 時，
 *   也可以透過 gradlew buiild 來進行專案建置。
 * - 如此持續集成（CI）的CI機器也沒有必要安裝 Gradle 了。
 * - 此時所有人都是使用的相同版本的 gradle，進而避免了由於版本不同所帶來的問題。
 */
task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

/* ========================================= */
// 默認的 src/test/java 目錄用於單元測試，通過 ./gradlew test 執行
// 新建 src/apiTest/java 目錄用於 API 測試，通過 ./gradlew apiTest 執行
// SourceSet 對應 src/apiTest/java 目錄
sourceSets {
    apiTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    apiTestCompile.extendsFrom testCompile
    apiTestRuntime.extendsFrom testRuntime
}

// 用於運行 src/apiTest/java 目錄下的 API 測試程式碼
task apiTest(type: Test) {
    testClassesDir = sourceSets.apiTest.output.getClassesDirs()
    classpath = sourceSets.apiTest.runtimeClasspath
}

apiTest.mustRunAfter test // API Test 必須運行在單元測試之後
build.dependsOn apiTest // 將 API Test 包含在 build 任務中。